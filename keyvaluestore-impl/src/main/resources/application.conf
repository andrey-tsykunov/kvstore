#
#
play.application.loader = com.andrey.playground.kvstore.impl.KVStoreLoader

kvstore.cassandra.keyspace = kvstore

cassandra-journal.keyspace = ${kvstore.cassandra.keyspace}
cassandra-snapshot-store.keyspace = ${kvstore.cassandra.keyspace}
lagom.persistence.read-side.cassandra.keyspace = ${kvstore.cassandra.keyspace}


# The properties below override Lagom default configuration with the recommended values for new projects.
#
# Lagom has not yet made these settings the defaults for backward-compatibility reasons.

# Prefer 'ddata' over 'persistence' to share cluster sharding state for new projects.
# See https://doc.akka.io/docs/akka/current/cluster-sharding.html#distributed-data-vs-persistence-mode
akka.cluster.sharding.state-store-mode = ddata

# Enable the serializer provided in Akka 2.5.8+ for akka.Done and other internal
# messages to avoid the use of Java serialization.
akka.actor.serialization-bindings {
  "akka.Done"                 = akka-misc
  "akka.actor.Address"        = akka-misc
  "akka.remote.UniqueAddress" = akka-misc
}

# JDBC read-side configuration.
db.default {
  driver = "org.h2.Driver"
  url = "jdbc:h2:mem:hello-service"
}

jdbc-defaults.slick.profile = "slick.jdbc.H2Profile$"

# Finally, ensure that Cassandra is used for the journal and snapshot-store
# Lagom's Cassandra and JDBC persistence modules both define these properties,
# so the order they are applied is non-deterministic.
akka.persistence {
  journal {
    plugin = cassandra-journal
  }

  snapshot-store {
    plugin = cassandra-snapshot-store
  }
}

# Default config
lagom.persistence.read-side {

  # how long should we wait when retrieving the last known offset
  offset-timeout = 5s

  # Exponential backoff for failures in ReadSideProcessor
  failure-exponential-backoff {
    # minimum (initial) duration until processor is started again
    # after failure
    min = 3s

    # the exponential back-off is capped to this duration
    max = 30s

    # additional random delay is based on this factor
    random-factor = 0.2
  }

  # The amount of time that a node should wait for the global prepare callback to execute
  global-prepare-timeout = 20s

  # Specifies that the read side processors should run on cluster nodes with a specific role.
  # If the role is not specified (or empty) all nodes in the cluster are used.
  run-on-role = ""

  # The Akka dispatcher to use for read-side actors and tasks.
  use-dispatcher = "lagom.persistence.dispatcher"
}